(assign fs (require 'fs))

(assign gensym-counter 0)

(def gensym (prefix)
  (do1
    (str (or prefix '"") '_g gensym-counter)
    (++ gensym-counter)))

(assign reps (obj < '_lt + '_p = '_eq ` '_qq | '_pipe * '_st - '_d _ '__ / '_s))

(def munge (x)
  (if (or (! (is x.constructor String)) (is (get x 0) '"\""))
    x
    (join (map (fn (y)
		 (or (get reps y) y))
	       x)
	  '"")))

(def fun (name args 'body)
  (with (pre ()
	 foo-args (split-by (fn (arg) (and (alist arg) (is (get arg 0) '')))
			    args)
	 args (first foo-args)
	 rest-arg (second (first foo-args))
	 after-args (slice foo-args 1))
    (each arg args
      (when (alist arg)
	(w/uniq sub
	  (each (j inner-arg) arg
	    (pre.push inner-arg `(get ,sub ,j)))
	  (= arg sub))))
    (when rest-arg
      (pre.push rest-arg `(slice arguments ,args.length (- arguments.length
							   ,after-args.length)))
      (each (i arg) after-args
	(var= foo `(get arguments (- arguments.length ,(- after-args.length i))))
	(if (alist arg)
	    (each (j inner-arg) arg
	      (pre.push inner-arg `(get ,foo ,j)))
	    (pre.push arg foo))))
    `(rawfun ,name ,args
       (with ,pre
	 ,@body))))

(def ifmac (cond then 'rest)
  `(rawif ,cond ,then ,(if (is rest.length 0)
			   null
			   (is rest.length 1)
			   (get rest 0)
			   `(if ,@rest))))

(assign macs (obj if ifmac fun fun symmacs (obj)))

(def commaop ('code)
  (join (map rendex code) '", "))

(def dewith (code)
  (if (alist code)
      (if (is (get code 0) 'with)
	  (with (foo (dewith (slice code 1))
		 vars (get foo 0)
		 bindings (pair (get (get foo 1) 0))
		 body (slice (get foo 1) 1)
		 syms (map first bindings)
		 replacements (map gensym syms))
	    (list (cat vars replacements)
		  (macex (obj symmacs (list2obj (map (fn (a b)
						       (list a (fn () b)))
						     syms replacements)))
			 `(do ,@(map (fn (a b)
				       `(= ,a ,b))
				     syms (map second bindings))
			      ,@body))))
	  (is (get code 0) 'rawfun)
	  (list () code)
	  (let foo (map dewith code)
	    (list (mapcat first foo) (map second foo))))
      (list () code)))

(def rawif (cond then else_)
  (str (rendex cond) '" ? " (rendex then) '" : " (rendex else_)))

(def rawwhile (cond 'body)
  (str '"function () {while (" (rendex cond) '") {\n    " (apply commaop body) '";\n}}()"))

(def funcall (name args)
  (str (rendex name) '"(" (apply commaop args) '")"))

(def rawget (a b)
  (str (rendex a) '"[" (rendex b) '"]"))

(def quote (a)
  (JSON.stringify a))

(def pp (a)
  (str '"++" (rendex a)))

(def rawfun (name args 'body)
  (with (foo (dewith (cat '(do) body))
	 names (get foo 0))
    (= body (get foo 1))
    (str '"function " (munge name) '" (" (apply commaop args) '") {\n"
	 (if (is names.length 0)
	     '""
	     (str '"    var " (apply commaop names) '";\n"))
	 vars
	 '"    return " (rendex body) '"\n}")))

(assign exprenderers (obj get rawget rawfun rawfun ' quote ++ pp while rawwhile
			rawif rawif do commaop))

(map (fn ((name op id))
       (= (get exprenderers name) (fn ('xs)
				    (if (is xs.length 0)
					id
					(join (map rendex xs) op)))))
     '((. . null)
       (+ " + " 0)
       (% " % " 0)
       (- " - " 0)
       (/ " / " 1)
       (and " && " true)
       (or " || " false)
       (< " < " true)
       (= " = " null)
       (is " === " true)))

(def rendex (code)
  (if (alist code)
      (if (is code.length 0)
	  '"[]"
	  (aif (get exprenderers (get code 0))
	       (str '"(" (apply it (slice code 1)) '")")
	       (str '"(" (funcall (get code 0) (slice code 1)) '")")))
      (munge code)))

(def macex (macs code)
  (if (and (alist code) (get code 0))
      (do
	(= (get code 0) (macex macs (get code 0)))
	(aif (get macs (get code 0))
	     (macex macs (apply it (slice code 1)))
	     (map (fn (x) (macex macs x)) code)))
      (if (is code.constructor String)
	  (aif (get macs.symmacs code)
	       (it code)
	       code)
	  code)))

(assign env (list (list 'macex macex)
		  (list 'gensym 'gensym)
		  (list 'require require)))

(def eval-with (code env)
  (apply (Function (map first env) code)
	 (map second env)))

(assign input '"")

(callback (process.stdin.on 'data) (data)
	  (zap + input data))

(callback (process.stdin.on 'end) ()
  (let code (JSON.parse input)
    (prn '"\"use strict\";")
    (each bar code
      (let foo (macex macs bar)
	(if (is (get foo 0) 'assign)
	    (do
	      (prn (str '"var " (get foo 1) '" = " (rendex (get foo 2)) '";"))
	      (env.push (list (munge (get foo 1))
			      (eval-with (str '"return " (rendex (get foo 2)))
					 env))))
	    (is (get foo 0) 'assign-mac)
	    (do
	      (prn (JSON.stringify (rendex (get foo 2))))
	      (= (get macs (get foo 1))
	         (eval-with (str '"return " (rendex (get foo 2))) env)))
	    (prn (str (rendex foo) '";")))))))
