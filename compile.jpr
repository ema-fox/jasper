(def parse (data f)
  (let foo (pfile (str data) 0)
    (if (second foo)
	 (f (first foo))
	 (prn (first foo)))))

(def gather-callbacks (cbs f)
  (let res (map (fn () undefined) cbs)
    (cbs.map (fn (cb i)
	       (cb (fn (x)
		     (= (get res i) x)
		     (if (res.every [! (is _ undefined)])
			 (f res))))))))

(assign run-repl (is (get process.argv 2) '-i))

(assign files (slice process.argv (if run-repl 3 2)))

(def now ()
  (/ ((new Date).getTime) 1000))


(def repl ()
  (let rl ((require 'readline).createInterface (obj input process.stdin
						    output process.stdout))
    (rl.setPrompt "Â¿ ")
    (rl.prompt)
    (callback (rl.on 'line) (line)
      (callback (parse line) ((code))
	(prn (catch e (apply eval-form (compile-helper code))
	       e.stack))
	(rl.prompt)))))

(assign start (now))

(let fs (require 'fs)
  (callback (gather-callbacks (map (fn (file)
				     (fn (f)
				       (callback (fs.readFile file) (err data)
					 (if err
					     (prn err)
					     (parse data f)))))
				   `(,(str __dirname "/jasper.jpr") ,@files)))
	    (codes)
    (prn (- (now) start))
    (with (code (apply cat codes)
		output (compile code))
      (if (no run-repl)
	  (fs.writeFileSync (str (get files (- files.length 1)) ".js") output)))
    (prn (- (now) start))
    (if run-repl
	(repl))))