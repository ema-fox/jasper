(assign fs (require 'fs))

(assign gensym-counter 0)

(def gensym (prefix)
  (do1
    (str (or prefix '"") '_g gensym-counter)
    (++ gensym-counter)))

(assign reps (obj < '_lt + '_p = '_eq ` '_qq | '_pipe * '_st - '_d _ '__ / '_s))

(assign wholereps (obj if 'if_ else 'else_ with 'with_))

(def munge (x)
  (if (or (! (astr x)) (is (get x 0) '"\""))
    x
    (or (get wholereps x)
	(join (map (fn (y)
		     (or (get reps y) y))
		   x)
	      '""))))

(def letmac (name val 'body)
  (if (alist name)
      (with (offset (if (anumber (first name))
			(do1
			  (first name)
			  (= name (slice name 1)))
			0)
	     (before (rest 'after)) (split-by (fn (arg) (and (alist arg) (is (get arg 0) '')))
					      name)
	     rest (if rest
		      (second rest)
		      false))
	(if (is name.length 0)
	    `(do ,@body)
	    (w/uniq g
	      (each (i name) before
		(= body `((let ,name (get ,g ,(+ offset i))
			    ,@body))))
	      (when rest
		(= body `((let ,rest (slice ,g ,(+ offset before.length)
					    (- (, g).length ,after.length))
			    ,@body)))
		(each (i name) after
		  (= body `((let ,name (get ,g (- (, g).length ,(- after.length i)))
			      ,@body)))))
	      `(let ,g ,val
		 ,@body))))
      `(rawlet ,name ,val ,@body)))

(def fun (name args 'body)
  (let (before restnafter) (split-by (fn (arg) (and (alist arg)
						    (is (get arg 0) '')))
				     args)
    (each arg before
      (when (alist arg)
	(w/uniq sub
	  (= body `((let ,arg ,sub
		      ,@body)))
	  (= arg sub))))
    `(rawfun ,name ,before
       (let (,before.length ,@restnafter) arguments
	 ,@body))))

(def ifmac (cond then 'rest)
  `(rawif ,cond ,then ,(if (is rest.length 0)
			   null
			   (is rest.length 1)
			   (get rest 0)
			   `(if ,@rest))))

(assign macs (obj if ifmac fun fun let letmac))

(def commaop ('code)
  (join (map rendex code) '", "))

(def delet (code)
  (if (alist code)
      (if (is (get code 0) 'rawlet)
	  (with ((vars (name val 'body)) (delet (slice code 1))
		 sub (gensym name))
	    (list (cat vars (list sub))
		  `(do (= ,sub ,val)
		       ,@(subsname name sub body))))
	  (is (get code 0) 'rawfun)
	  (list () code)
	  (let foo (map delet code)
	    (list (mapcat first foo) (map second foo))))
      (list () code)))

(def rawif (cond then else_)
  (str (rendex cond) '" ? " (rendex then) '" : " (rendex else_)))

(def rawwhile (cond 'body)
  (str '"function () {while (" (rendex cond) '") {\n    " (apply commaop body) '";\n}}()"))

(def funcall (name args)
  (str (rendex name) '"(" (apply commaop args) '")"))

(def rawget (a b)
  (str (rendex a) '"[" (rendex b) '"]"))

(def quote (a)
  (JSON.stringify a))

(def pp (a)
  (str '"++" (rendex a)))

(def rawfun (name args 'body)
  (let (names body) (delet (cat '(do) body))
    (str '"function " (munge name) '" (" (apply commaop args) '") {\n"
	 (if (is names.length 0)
	     '""
	     (str '"    var " (apply commaop names) '";\n"))
	 '"    return " (rendex body) '"\n}")))

(assign exprenderers (obj get rawget rawfun rawfun ' quote ++ pp while rawwhile
			rawif rawif do commaop))

(map (fn ((name op id))
       (= (get exprenderers name) (fn ('xs)
				    (if (is xs.length 0)
					id
					(join (map rendex xs) op)))))
     '((. . null)
       (+ " + " 0)
       (% " % " 0)
       (- " - " 0)
       (/ " / " 1)
       (and " && " true)
       (or " || " false)
       (< " < " true)
       (= " = " null)
       (is " === " true)))

(def rendex (code)
  (if (alist code)
      (if (is code.length 0)
	  '"[]"
	  (aif (get exprenderers (get code 0))
	       (str '"(" (apply it (slice code 1)) '")")
	       (str '"(" (funcall (get code 0) (slice code 1)) '")")))
      (if (is code null)
	  'null
	  (munge code))))

(def macex (macs code)
  (if (and (alist code) (get code 0))
      (do
	(= (get code 0) (macex macs (get code 0)))
	(aif (get macs (get code 0))
	     (macex macs (apply it (slice code 1)))
	     (map (fn (x) (macex macs x)) code)))
      code))

(assign env (list (list 'gensym gensym)
		  (list 'require require)))

(def eval-with (code env)
  (apply (Function (map first env) code)
	 (map second env)))

(assign input '"")

(callback (process.stdin.on 'data) (data)
	  (zap + input data))

(callback (process.stdin.on 'end) ()
  (let code (JSON.parse input)
    (prn '"\"use strict\";")
    (each bar code
      (let foo (macex macs bar)
	(if (is (get foo 0) 'assign)
	    (do
	      (prn (str '"var " (munge (get foo 1)) '" = " (rendex (get foo 2)) '";"))
	      (env.push (list (munge (get foo 1))
			      (eval-with (str '"return " (rendex (get foo 2)))
					 env))))
	    (is (get foo 0) 'assign-mac)
	    (do
	      (prn (JSON.stringify (rendex (get foo 2))) '";")
	      (= (get macs (get foo 1))
	         (eval-with (str '"return " (rendex (get foo 2))) env)))
	    (prn (str (rendex foo) '";")))))))
