'"use strict"

(assign slice (fun slice (xs start end)
		   (().slice.call xs start end)))

(assign list (fun list ('xs) xs))

(assign-mac mac (fun mac (name 'argsnbody)
		     (list 'assign-mac name ((list 'fun name).concat argsnbody))))

(mac def (name 'argsnbody)
  (list 'assign name ((list 'fun name).concat argsnbody)))

(def cat ('xs)
  (().concat.apply () xs))

(def join (xs x)
  (().join.call xs x))

(def alist (x)
  (is x.constructor Array))

(def apply (f 'argsa argsb)
  (f.apply null (cat argsa argsb)))

(def prn (a 'as)
  (apply console.log a as)
  a)

(def map1 (f xs)
  (var= ys ())
  (for (var= i 0) (< i xs.length) (++ i)
       (ys.push (f (get xs i))))
  ys)

(def map (f 'xss)
  (if (is xss.length 1)
      (map1 f (get xss 0))
      (do
	(var= length (apply Math.min (map1 (fun "" (x) x.length) xss)))
	(var= ys ())
	(for (var= i 0) (< i length) (++ i)
	     (ys.push (apply f (map1 (fun "" (x) (get x i)) xss))))
	ys)))

(def mapcat (f 'xss)
  (apply cat (apply map f xss)))

(def quote (a)
  (JSON.stringify a))

(def runqq (a)
  (if (alist a)
      (if (is (get a 0) ',@)
	  (get a 1)
	  (is (get a 0) ',)
	  (list 'list (get a 1))
	  (list 'list (cat '(cat) (map runqq a))))
      (cat '(list) (quote a))))

(mac ` (a)
    (list 'get (runqq a) 0))

(mac fn (args 'body)
  `(fun "" ,args ,@body))

(mac when (cond 'body)
  `(if ,cond (do ,@body)))

(mac each (i v xs 'body)
  (var= tmpmacs (Object))
  (= tmpmacs.symmacs (Object))
  (= (get tmpmacs.symmacs v) (fn (x)
		       `(get ,xs ,i)))
  `(for (var= ,i 0) (< ,i (, xs).length) (++ ,i)
	,(macex tmpmacs `(do ,@body))))

(def first ((a _)) a)
(def second ((_ a)) a)

(def pair (xs)
  (var= ys ())
  (for (var= i 0) (< i xs.length) (= i (+ i 2))
    (ys.push (list (get xs i) (get xs (+ i 1)))))
  ys)

(def list2obj (args)
  (var= res (Object))
  (map (fn ((k v)) (= (get res k) v))
       args)
  res)

(mac obj ('args)
  `(list2obj (list ,@(map (fn ((k v))
                            `(list ',k ,v))
                          (pair args)))))

(mac zap (f place 'args)
  `(= ,place (,f ,place ,@args)))

(mac callback (to from 'body)
  `(,@to (fn ,from ,@body)))


'"non core:"


(def dbg (x)
  (prn (JSON.stringify x))
  x)

(var= sqrt Math.sqrt)
(var= ** Math.pow)

(def distance ((pa0 pa1) (pb0 pb1))
  (sqrt (+ (** (- pb0 pa0) 2)
	   (** (- pb1 pa1) 2))))

(def plus ((pa0 pa1) (pb0 pb1))
  (list (+ pa0 pb0) (+ pa1 pb1)))

(var= ngbroffsets (list (list 1 0) (list 0 1) (list -1 0) (list 0 -1)))
