(= list Array)

(= (get macs 'mac) (def mac (name 'argsnbody)
		      (list '= (list 'get 'macs (list '"'" name))
			    ((. (list 'def name) concat) argsnbody))))

(def cat ('xs)
  (().concat.apply () xs))

(mac strender (name 'body)
  (list '= (list 'get 'strenderers (list '"'" name)) (cat (list 'def name) body)))

(def alist (x)
  (is x.constructor list))

(def apply (f 'argsa argsb)
  (f.apply null (cat argsa argsb)))

(def prn (a 'as)
  (apply console.log a as)
  a)

(def map1 (f xs)
  (var= ys ())
  (for (var= i 0) (< i xs.length) (++ i)
       (ys.push (f (get xs i))))
  ys)

(def map (f 'xss)
  (if (is xss.length 1)
      (map1 f (get xss 0))
      (do
	(var= length (apply Math.min (map1 (def "" (x) x.length) xss)))
	(var= ys ())
	(for (var= i 0) (< i length) (++ i)
	     (ys.push (apply f (map1 (def "" (x) (get x i)) xss))))
	ys)))

(def mapcat (f 'xss)
  (apply cat (apply map f xss)))

(def runqq (a)
  (if (alist a)
      (if (iso (get a 0) ',@)
	  (get a 1)
	  (iso (get a 0) ',)
	  (list 'list (get a 1))
	  (list 'list (cat '(cat) (map runqq a))))
      (cat '(list) (quote a))))

(mac ` (a)
    (list 'get (runqq a) 0))

(mac fn (args 'body)
  `(def "" ,args ,@body))

(mac when (cond 'body)
  `(if ,cond (do ,@body)))

(def assoc (o k v)
  (var= o2 (Object.create o))
  (= (get o2 k) v)
  o2)

(mac each (i v xs 'body)
  (var= tmpmacs (assoc macs 'symmacs (assoc (get macs 'symmacs) v (fn (x)
								    `(get ,xs ,i)))))
  `(for (var= ,i 0) (< ,i (, xs).length) (++ ,i)
	,(macex tmpmacs `(do ,@body))))

(mac zap (f place 'args)
  `(= ,place (,f ,place ,@args)))

(mac callback (to from 'body)
  `(,@to (fn ,from ,@body)))


'"non core:"


(def dbg (x)
  (prn (JSON.stringify x))
  x)

(= sqrt Math.sqrt)
(= ** Math.pow)

(def distance ((pa0 pa1) (pb0 pb1))
  (sqrt (+ (** (- pb0 pa0) 2)
	   (** (- pb1 pa1) 2))))

(def plus ((pa0 pa1) (pb0 pb1))
  (list (+ pa0 pb0) (+ pa1 pb1)))

(var= ngbroffsets (list (list 1 0) (list 0 1) (list -1 0) (list 0 -1)))