(assign slice (fun slice (xs start end)
		   (().slice.call xs start end)))

(assign list (fun list ('xs) xs))

(assign-mac mac (fun mac (name 'argsnbody)
		     (list 'assign-mac name ((list 'fun name).concat argsnbody))))

(mac def (name 'argsnbody)
  (list 'assign name ((list 'fun name).concat argsnbody)))

(def cat ('xs)
  (().concat.apply () xs))

(def join (xs x)
  (().join.call xs x))

(def str ('xs)
  (join xs '""))

(def alist (x)
  (and x (is x.constructor Array)))

(def astr (x)
  (is (typeof x) 'string))

(def anumber (x)
  (is (typeof x) 'number))

(def afunction (x)
  (is (typeof x) 'function))

(def apply (f 'argsa argsb)
  (f.apply null (cat argsa argsb)))

(def map1 (f xs)
  (().map.call xs (fun "" (x) (f x))))

(def map (f 'xss)
  (if (is xss.length 1)
      (map1 f (get xss 0))
      (let length (apply Math.min (map1 (fun "" (x) x.length) xss))
	(let ys ()
	  (let i 0
	    (console.warn length ys i xss)
	    (while (< i length)
	      (ys.push (apply f (map1 (fun "" (x) (get x i)) xss)))
	      (++ i)))
	  ys))))

(def sfy (x)
  (if (is x null)
      'null
      (is x undefined)
      'undefined
      (alist x)
      (str '"(" (join (map sfy x) '" ") '")")
      (str x)))

(def prn (a 'as)
  (apply console.log (sfy a) (map sfy as))
  a)

(def mapcat (f 'xss)
  (apply cat (apply map f xss)))

(def quote (a)
  (JSON.stringify a))

(def runqq (a)
  (if (alist a)
      (if (is (get a 0) ',@)
	  (get a 1)
	  (is (get a 0) ',)
	  (list 'list (get a 1))
	  (list 'list (cat '(cat) (map runqq a))))
      (cat '(list) (quote a))))

(mac ` (a)
    (list 'get (runqq a) 0))

(mac fn (args 'body)
  `(fun "" ,args ,@body))

(mac when (cond 'body)
  `(if ,cond (do ,@body)))

(mac land ('xs)
  (lif (is xs.length 0)
       true
       (is xs.length 1)
       (get xs 0)
       `(lif ,(get xs 0)
	     (land ,@(slice xs 1)))))

(def subsname (name sub code)
  (if (alist code)
      (if (is (get code 0) '.)
	  `(. ,(subsname name sub (get code 1)) ,@(slice code 2))
	  (map (fn (x) (subsname name sub x)) code))
      (is code name)
      sub
      code))

(def first ((a _)) a)
(def second ((_ a)) a)

(mac with (bindings 'body)
  (if (is bindings.length 0)
      `(do ,@body)
      `(let ,(first bindings) ,(second bindings)
	 (with ,(slice bindings 2)
	   ,@body))))

(mac aif (expr then else)
  `(let it ,expr
     (if it ,then ,else)))

(mac laif (expr then else)
  `(let it ,expr
     (lif it ,then ,else)))

(mac afn (args 'body)
  `(fun self ,args ,@body))

(mac awhile (cond 'body)
  `(let it undefined
     `(while (= it ,cond)
	,@body)))

(def listify (x)
  (if (alist x)
      x
      (list x)))

(mac w/uniq (names 'body)
  `(with ,(mapcat (fn (n) (list n `(gensym ',n)))
		  (listify names))
	 ,@body))

(mac dbg ('xs)
  (w/uniq g
    `(let ,g ,xs
       (prn ',xs '":" ,g)
       ,g)))

(mac lor ('xs)
  (lif xs
       (w/uniq g
	 `(let ,g ,(get xs 0)
	    (lif ,g ,g (lor ,@(slice xs 1)))))))


(mac do1 (x 'xs)
  (w/uniq g
    `(let ,g ,x
       ,@xs
       ,g)))

(mac zap (f place 'args)
  `(= ,place (,f ,place ,@args)))

(def pair (xs)
  (with (ys ()
	 i 0)
    (while (< i xs.length)
      (ys.push (list (get xs i) (get xs (+ i 1))))
      (zap + i 2))
    ys))

(def list2obj (args)
  (let res (Object.create null)
    (map (fn ((k v)) (= (get res k) v))
	 args)
    res))

(mac obj ('args)
  `(list2obj (list ,@(map (fn ((k v))
                            `(list ',k ,v))
                          (pair args)))))

(mac each (iv xs 'body)
  (with (i null v null)
    (if (alist iv)
	(do
	  (= i (first iv))
	  (= v (second iv)))
	(do
	  (= i (gensym i))
	  (= v iv)))
    `(let ,i 0
       (while (< ,i (, xs).length)
	 ,@(subsname v `(get ,xs ,i) body)
	 (++ ,i)))))

(def testify (test)
  (if (afunction test)
      test
      (fn (x) (is test x))))

(mac no (x)
  `(lif ,x
	false
	true))

(def index-by (test xs)
  (with (f (testify test)
	 index false)
    (each (i v) xs
      (lif (land (no index) (f v))
	   (= index i)))
    index))

(def split-by (f xs)
  (let i (index-by f xs)
    (if (is i false)
	(list xs ())
	(list (slice xs 0 i) (slice xs i)))))

(def some (test xs)
  (with (f (testify test)
	 res false)
    (each x xs
      (laif (land (! res) (f x))
	    (= res it)))
    res))

(def all (test xs)
  (let f (testify test)
    (! (some (fn (x) (! (f x))) xs))))

(def iso (x y)
  (or (is x y)
      (and (alist x) (alist y) (is x.length y.length)
	   (all true (map iso x y)))))

(mac callback (to from 'body)
  `(,@to (fn ,from ,@body)))


'"non core:"

(assign sqrt Math.sqrt)
(assign ** Math.pow)

(def distance ((pa0 pa1) (pb0 pb1))
  (sqrt (+ (** (- pb0 pa0) 2)
	   (** (- pb1 pa1) 2))))

(def plus ((pa0 pa1) (pb0 pb1))
  (list (+ pa0 pb0) (+ pa1 pb1)))

(assign ngbroffsets (list (list 1 0) (list 0 1) (list -1 0) (list 0 -1)))
